package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"
)

func main() {
	version := git("git describe --tags --always --dirty")
	commit := git("git rev-parse --short HEAD")
	buildDate := time.Now().UTC().Format(time.RFC3339)
	compiler := runtime.Version()

	code := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
// This file contains build info.
//go:build generated

package main

import (
	"fmt"
	"time"
)

type BuildInfo struct {
    // BuildVersion is the version of build from Git tags.
	BuildVersion string    `+"`json:\"version\"`"+`
	// BuildCommit is the short representation of git commit hash.
	BuildCommit  string    `+"`json:\"commit_id\"`"+`
	// BuildDate is the build date.
	BuildDate    time.Time `+"`json:\"time\"`"+`
	// Compiler is the version of Go compiler used for building.
	Compiler     string    `+"`json:\"compiler\"`"+`

}

var GeneratedBuildInfo = &BuildInfo{
	BuildVersion: "%s",
	BuildCommit:  "%s",
	BuildDate:    mustParseTime("%s"),
	Compiler:     "%s",
}

func (b *BuildInfo) String() string {
	return fmt.Sprintf(
		"Build Version : %%s\nBuild Commit  : %%s\nBuild Date    : %%s\nCompiler      : %%s\n",
		b.BuildVersion, b.BuildCommit, b.BuildDate.Format(time.RFC3339), b.Compiler,
	)
}

func mustParseTime(val string) time.Time {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		panic(err)
	}
	return t
}
`, version, commit, buildDate, compiler)

	err := os.WriteFile("buildInfo.go", []byte(code), 0644)
	if err != nil {
		panic(err)
	}
	fmt.Println("buildInfo.go generated")
}

func git(cmd string) string {
	out, err := exec.Command("sh", "-c", cmd).Output()
	if err != nil {
		return "N/A"
	}
	return strings.TrimSpace(string(out))
}
