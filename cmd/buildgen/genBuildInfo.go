package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"
)

func main() {
	version := "Generated-" + git("git describe --tags --always --dirty")
	commit := git("git rev-parse --short HEAD")
	buildDate := time.Now().UTC().Format(time.RFC3339)
	compiler := runtime.Version()

	code := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
// This file contains build info.
//go:build generated

package main

import (
	"github.com/Fuonder/metriccoll.git/cmd/buildinfo"
)

var (
	buildVersion = "N/A"
	buildDate    = "N/A"
	buildCommit  = "N/A"
)

var GeneratedBuildInfo = &buildinfo.BuildInfo{
	BuildVersion: "%s",
	BuildCommit:  "%s",
	BuildDate:    buildinfo.MustParseTime("%s"),
	Compiler:     "%s",
}
`, version, commit, buildDate, compiler)

	err := os.WriteFile("buildInfo.go", []byte(code), 0644)
	if err != nil {
		panic(err)
	}
	fmt.Println("buildInfo.go generated")
}

func git(cmd string) string {
	out, err := exec.Command("sh", "-c", cmd).Output()
	if err != nil {
		return "N/A"
	}
	return strings.TrimSpace(string(out))
}
