// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repository.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Fuonder/metriccoll.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricReader is a mock of MetricReader interface.
type MockMetricReader struct {
	ctrl     *gomock.Controller
	recorder *MockMetricReaderMockRecorder
}

// MockMetricReaderMockRecorder is the mock recorder for MockMetricReader.
type MockMetricReaderMockRecorder struct {
	mock *MockMetricReader
}

// NewMockMetricReader creates a new mock instance.
func NewMockMetricReader(ctrl *gomock.Controller) *MockMetricReader {
	mock := &MockMetricReader{ctrl: ctrl}
	mock.recorder = &MockMetricReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricReader) EXPECT() *MockMetricReaderMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricReader) GetAllMetrics() []models.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics")
	ret0, _ := ret[0].([]models.Metrics)
	return ret0
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricReaderMockRecorder) GetAllMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricReader)(nil).GetAllMetrics))
}

// GetMetricByName mocks base method.
func (m *MockMetricReader) GetMetricByName(name, mType string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByName", name, mType)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByName indicates an expected call of GetMetricByName.
func (mr *MockMetricReaderMockRecorder) GetMetricByName(name, mType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByName", reflect.TypeOf((*MockMetricReader)(nil).GetMetricByName), name, mType)
}

// MockMetricWriter is a mock of MetricWriter interface.
type MockMetricWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricWriterMockRecorder
}

// MockMetricWriterMockRecorder is the mock recorder for MockMetricWriter.
type MockMetricWriterMockRecorder struct {
	mock *MockMetricWriter
}

// NewMockMetricWriter creates a new mock instance.
func NewMockMetricWriter(ctrl *gomock.Controller) *MockMetricWriter {
	mock := &MockMetricWriter{ctrl: ctrl}
	mock.recorder = &MockMetricWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricWriter) EXPECT() *MockMetricWriterMockRecorder {
	return m.recorder
}

// AppendMetric mocks base method.
func (m *MockMetricWriter) AppendMetric(metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendMetric indicates an expected call of AppendMetric.
func (mr *MockMetricWriterMockRecorder) AppendMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendMetric", reflect.TypeOf((*MockMetricWriter)(nil).AppendMetric), metric)
}

// AppendMetrics mocks base method.
func (m *MockMetricWriter) AppendMetrics(arg0 []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendMetrics indicates an expected call of AppendMetrics.
func (mr *MockMetricWriterMockRecorder) AppendMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendMetrics", reflect.TypeOf((*MockMetricWriter)(nil).AppendMetrics), arg0)
}

// MockMetricFileHandler is a mock of MetricFileHandler interface.
type MockMetricFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetricFileHandlerMockRecorder
}

// MockMetricFileHandlerMockRecorder is the mock recorder for MockMetricFileHandler.
type MockMetricFileHandlerMockRecorder struct {
	mock *MockMetricFileHandler
}

// NewMockMetricFileHandler creates a new mock instance.
func NewMockMetricFileHandler(ctrl *gomock.Controller) *MockMetricFileHandler {
	mock := &MockMetricFileHandler{ctrl: ctrl}
	mock.recorder = &MockMetricFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricFileHandler) EXPECT() *MockMetricFileHandlerMockRecorder {
	return m.recorder
}

// DumpMetrics mocks base method.
func (m *MockMetricFileHandler) DumpMetrics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpMetrics")
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpMetrics indicates an expected call of DumpMetrics.
func (mr *MockMetricFileHandlerMockRecorder) DumpMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpMetrics", reflect.TypeOf((*MockMetricFileHandler)(nil).DumpMetrics))
}

// loadMetricsFromFile mocks base method.
func (m *MockMetricFileHandler) loadMetricsFromFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadMetricsFromFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// loadMetricsFromFile indicates an expected call of loadMetricsFromFile.
func (mr *MockMetricFileHandlerMockRecorder) loadMetricsFromFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadMetricsFromFile", reflect.TypeOf((*MockMetricFileHandler)(nil).loadMetricsFromFile))
}

// MockMetricDatabaseHandler is a mock of MetricDatabaseHandler interface.
type MockMetricDatabaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetricDatabaseHandlerMockRecorder
}

// MockMetricDatabaseHandlerMockRecorder is the mock recorder for MockMetricDatabaseHandler.
type MockMetricDatabaseHandlerMockRecorder struct {
	mock *MockMetricDatabaseHandler
}

// NewMockMetricDatabaseHandler creates a new mock instance.
func NewMockMetricDatabaseHandler(ctrl *gomock.Controller) *MockMetricDatabaseHandler {
	mock := &MockMetricDatabaseHandler{ctrl: ctrl}
	mock.recorder = &MockMetricDatabaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricDatabaseHandler) EXPECT() *MockMetricDatabaseHandlerMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockMetricDatabaseHandler) CheckConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockMetricDatabaseHandlerMockRecorder) CheckConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockMetricDatabaseHandler)(nil).CheckConnection))
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// GetCounterList mocks base method.
func (m *MockCollection) GetCounterList() map[string]models.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterList")
	ret0, _ := ret[0].(map[string]models.Counter)
	return ret0
}

// GetCounterList indicates an expected call of GetCounterList.
func (mr *MockCollectionMockRecorder) GetCounterList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterList", reflect.TypeOf((*MockCollection)(nil).GetCounterList))
}

// GetGaugeList mocks base method.
func (m *MockCollection) GetGaugeList() map[string]models.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeList")
	ret0, _ := ret[0].(map[string]models.Gauge)
	return ret0
}

// GetGaugeList indicates an expected call of GetGaugeList.
func (mr *MockCollectionMockRecorder) GetGaugeList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeList", reflect.TypeOf((*MockCollection)(nil).GetGaugeList))
}

// ReadValues mocks base method.
func (m *MockCollection) ReadValues() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadValues")
}

// ReadValues indicates an expected call of ReadValues.
func (mr *MockCollectionMockRecorder) ReadValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadValues", reflect.TypeOf((*MockCollection)(nil).ReadValues))
}

// UpdateValues mocks base method.
func (m *MockCollection) UpdateValues(ctx context.Context, interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateValues", ctx, interval)
}

// UpdateValues indicates an expected call of UpdateValues.
func (mr *MockCollectionMockRecorder) UpdateValues(ctx, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValues", reflect.TypeOf((*MockCollection)(nil).UpdateValues), ctx, interval)
}

// MockDBConnection is a mock of DBConnection interface.
type MockDBConnection struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectionMockRecorder
}

// MockDBConnectionMockRecorder is the mock recorder for MockDBConnection.
type MockDBConnectionMockRecorder struct {
	mock *MockDBConnection
}

// NewMockDBConnection creates a new mock instance.
func NewMockDBConnection(ctrl *gomock.Controller) *MockDBConnection {
	mock := &MockDBConnection{ctrl: ctrl}
	mock.recorder = &MockDBConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnection) EXPECT() *MockDBConnectionMockRecorder {
	return m.recorder
}

// AppendBatch mocks base method.
func (m *MockDBConnection) AppendBatch(ctx context.Context, metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendBatch indicates an expected call of AppendBatch.
func (mr *MockDBConnectionMockRecorder) AppendBatch(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBatch", reflect.TypeOf((*MockDBConnection)(nil).AppendBatch), ctx, metrics)
}

// AppendCounterMetric mocks base method.
func (m *MockDBConnection) AppendCounterMetric(ctx context.Context, metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendCounterMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendCounterMetric indicates an expected call of AppendCounterMetric.
func (mr *MockDBConnectionMockRecorder) AppendCounterMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendCounterMetric", reflect.TypeOf((*MockDBConnection)(nil).AppendCounterMetric), ctx, metric)
}

// AppendGaugeMetric mocks base method.
func (m *MockDBConnection) AppendGaugeMetric(ctx context.Context, metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendGaugeMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendGaugeMetric indicates an expected call of AppendGaugeMetric.
func (mr *MockDBConnectionMockRecorder) AppendGaugeMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendGaugeMetric", reflect.TypeOf((*MockDBConnection)(nil).AppendGaugeMetric), ctx, metric)
}

// Close mocks base method.
func (m *MockDBConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBConnection)(nil).Close))
}

// CreateTablesContext mocks base method.
func (m *MockDBConnection) CreateTablesContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTablesContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTablesContext indicates an expected call of CreateTablesContext.
func (mr *MockDBConnectionMockRecorder) CreateTablesContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTablesContext", reflect.TypeOf((*MockDBConnection)(nil).CreateTablesContext), ctx)
}

// GetAllMetrics mocks base method.
func (m *MockDBConnection) GetAllMetrics(ctx context.Context) ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockDBConnectionMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockDBConnection)(nil).GetAllMetrics), ctx)
}

// GetCounterMetric mocks base method.
func (m *MockDBConnection) GetCounterMetric(ctx context.Context, name string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterMetric", ctx, name)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterMetric indicates an expected call of GetCounterMetric.
func (mr *MockDBConnectionMockRecorder) GetCounterMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterMetric", reflect.TypeOf((*MockDBConnection)(nil).GetCounterMetric), ctx, name)
}

// GetGaugeMetric mocks base method.
func (m *MockDBConnection) GetGaugeMetric(ctx context.Context, name string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeMetric", ctx, name)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeMetric indicates an expected call of GetGaugeMetric.
func (mr *MockDBConnectionMockRecorder) GetGaugeMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeMetric", reflect.TypeOf((*MockDBConnection)(nil).GetGaugeMetric), ctx, name)
}

// TryConnectContext mocks base method.
func (m *MockDBConnection) TryConnectContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryConnectContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryConnectContext indicates an expected call of TryConnectContext.
func (mr *MockDBConnectionMockRecorder) TryConnectContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryConnectContext", reflect.TypeOf((*MockDBConnection)(nil).TryConnectContext), ctx)
}

// MockDBReader is a mock of DBReader interface.
type MockDBReader struct {
	ctrl     *gomock.Controller
	recorder *MockDBReaderMockRecorder
}

// MockDBReaderMockRecorder is the mock recorder for MockDBReader.
type MockDBReaderMockRecorder struct {
	mock *MockDBReader
}

// NewMockDBReader creates a new mock instance.
func NewMockDBReader(ctrl *gomock.Controller) *MockDBReader {
	mock := &MockDBReader{ctrl: ctrl}
	mock.recorder = &MockDBReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBReader) EXPECT() *MockDBReaderMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockDBReader) GetAllMetrics(ctx context.Context) ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockDBReaderMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockDBReader)(nil).GetAllMetrics), ctx)
}

// GetCounterMetric mocks base method.
func (m *MockDBReader) GetCounterMetric(ctx context.Context, name string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterMetric", ctx, name)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterMetric indicates an expected call of GetCounterMetric.
func (mr *MockDBReaderMockRecorder) GetCounterMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterMetric", reflect.TypeOf((*MockDBReader)(nil).GetCounterMetric), ctx, name)
}

// GetGaugeMetric mocks base method.
func (m *MockDBReader) GetGaugeMetric(ctx context.Context, name string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeMetric", ctx, name)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeMetric indicates an expected call of GetGaugeMetric.
func (mr *MockDBReaderMockRecorder) GetGaugeMetric(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeMetric", reflect.TypeOf((*MockDBReader)(nil).GetGaugeMetric), ctx, name)
}

// MockDBWriter is a mock of DBWriter interface.
type MockDBWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDBWriterMockRecorder
}

// MockDBWriterMockRecorder is the mock recorder for MockDBWriter.
type MockDBWriterMockRecorder struct {
	mock *MockDBWriter
}

// NewMockDBWriter creates a new mock instance.
func NewMockDBWriter(ctrl *gomock.Controller) *MockDBWriter {
	mock := &MockDBWriter{ctrl: ctrl}
	mock.recorder = &MockDBWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBWriter) EXPECT() *MockDBWriterMockRecorder {
	return m.recorder
}

// AppendBatch mocks base method.
func (m *MockDBWriter) AppendBatch(ctx context.Context, metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendBatch indicates an expected call of AppendBatch.
func (mr *MockDBWriterMockRecorder) AppendBatch(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBatch", reflect.TypeOf((*MockDBWriter)(nil).AppendBatch), ctx, metrics)
}

// AppendCounterMetric mocks base method.
func (m *MockDBWriter) AppendCounterMetric(ctx context.Context, metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendCounterMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendCounterMetric indicates an expected call of AppendCounterMetric.
func (mr *MockDBWriterMockRecorder) AppendCounterMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendCounterMetric", reflect.TypeOf((*MockDBWriter)(nil).AppendCounterMetric), ctx, metric)
}

// AppendGaugeMetric mocks base method.
func (m *MockDBWriter) AppendGaugeMetric(ctx context.Context, metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendGaugeMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendGaugeMetric indicates an expected call of AppendGaugeMetric.
func (mr *MockDBWriterMockRecorder) AppendGaugeMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendGaugeMetric", reflect.TypeOf((*MockDBWriter)(nil).AppendGaugeMetric), ctx, metric)
}
